---
system_domain: (( properties.system_domain ))
# Using an array index is dangerous.  Consider using an Ops file for this.
cf_admin_password: (( properties.uaa.scim.users.[0].password ))
consul_encrypt_key: (( properties.consul.encrypt_keys.[0] ))
blobstore_admin_users_username: (( properties.blobstore.admin_users.[0].username ))
blobstore_admin_users_password: (( properties.blobstore.admin_users.[0].password ))
blobstore_secure_link_secret: (( properties.blobstore.secure_link.secret ))
cc_bridge_cc_uploader:
  ca: (( properties.capi.cc_uploader.cc.ca_cert ))
  certificate: (( properties.capi.cc_uploader.cc.client_cert ))
  private_key: (( properties.capi.cc_uploader.cc.client_key ))
cc_bridge_tps:
  ca: (( properties.capi.tps.cc.ca_cert ))
  certificate: (( properties.capi.tps.cc.client_cert ))
  private_key: (( properties.capi.tps.cc.client_key ))
cc_bulk_api_password: (( properties.cc.bulk_api_password ))
cc_database_password: (( properties.ccdb.roles.[0].password || nil ))
cc_database_username: (( properties.ccdb.roles.[0].name || nil ))
cc_db_encryption_key: (( properties.cc.db_encryption_key))
cc_internal_api_password: (( properties.cc.internal_api_password ))
cc_staging_upload_password: (( properties.cc.staging_upload_password ))
cc_tls:
  ca: (( properties.cc.mutual_tls.ca_cert ))
  certificate: (( properties.cc.mutual_tls.public_cert ))
  private_key: (( properties.cc.mutual_tls.private_key ))
consul_agent:
  ca: (( properties.consul.ca_cert ))
  certificate: (( properties.consul.agent_cert ))
  private_key: (( properties.consul.agent_key ))
consul_agent_ca:
  ca: (( properties.consul.ca_cert ))
  certificate: (( properties.consul.ca_cert ))
consul_server:
  ca: (( properties.consul.ca_cert ))
  certificate: (( properties.consul.server_cert ))
  private_key: (( properties.consul.server_key ))
diego_auctioneer_client:
  ca: (( properties.diego.auctioneer.ca_cert ))
  certificate: (( properties.diego.bbs.auctioneer.client_cert ))
  private_key: (( properties.diego.bbs.auctioneer.client_key ))
diego_auctioneer_server:
  ca: (( properties.diego.auctioneer.ca_cert ))
  certificate: (( properties.diego.auctioneer.server_cert ))
  private_key: (( properties.diego.auctioneer.server_key ))
diego_bbs_client:
  ca: (( properties.diego.ssh_proxy.bbs.ca_cert ))
  certificate: (( properties.diego.ssh_proxy.bbs.client_cert ))
  private_key: (( properties.diego.ssh_proxy.bbs.client_key ))
diego_bbs_active_key_label: (( properties.diego.bbs.active_key_label ))
diego_bbs_encryption_keys_passphrase: (( properties.diego.bbs.encryption_keys.[0].passphrase ))
diego_bbs_server:
  ca: (( properties.diego.bbs.ca_cert ))
  certificate: (( properties.diego.bbs.server_cert ))
  private_key: (( properties.diego.bbs.server_key ))
diego_database_password: (( properties.diego.bbs.sql.db_password ))
diego_locket_server:
  ca: (( jobs.[0].properties.tls.ca_cert ))
  certificate: (( jobs.[0].properties.tls.cert ))
  private_key: (( jobs.[0].properties.tls.key ))
diego_locket_client:
  ca: (( properties.diego.bbs.ca_cert ))
  certificate: (( properties.diego.auctioneer.bbs.client_cert ))
  private_key: (( properties.diego.auctioneer.bbs.client_key ))
diego_rep_agent:
  ca: (( properties.diego.rep.ca_cert ))
  certificate: (( properties.diego.rep.server_cert ))
  private_key: (( properties.diego.rep.server_key ))
diego_rep_client:
  ca: (( properties.diego.bbs.rep.ca_cert ))
  certificate: (( properties.diego.bbs.rep.client_cert ))
  private_key: (( properties.diego.bbs.rep.client_key ))
diego_ssh_proxy_host_key:
  private_key: (( properties.diego.ssh_proxy.host_key ))
  public_key_fingerprint: (( properties.app_ssh.host_key_fingerprint ))
service_cf_internal_ca:
  ca: (( properties.diego.bbs.ca_cert ))
  certificate: (( properties.diego.bbs.ca_cert ))
dropsonde_shared_secret: (( properties.doppler_endpoint.shared_secret ))
etcd_ca:
  ca: (( properties.etcd.ca_cert ))
  certificate: (( properties.etcd.ca_cert ))
etcd_client:
  ca: (( properties.etcd.ca_cert ))
  certificate: (( properties.etcd.client_cert ))
  private_key: (( properties.etcd.client_key ))
etcd_peer:
  ca: (( properties.etcd.peer_ca_cert ))
  certificate: (( properties.etcd.peer_cert ))
  private_key: (( properties.etcd.peer_key ))
etcd_peer_ca:
  ca: (( properties.etcd.peer_ca_cert ))
  certificate: (( properties.etcd.peer_ca_cert ))
etcd_server:
  ca: (( properties.etcd.ca_cert ))
  certificate: (( properties.etcd.server_cert ))
  private_key: (( properties.etcd.server_key ))
locket_database_password: (( properties.diego.locket.sql.db_password ))
loggregator_ca:
  ca: (( properties.loggregator.tls.ca_cert ))
  certificate: (( properties.loggregator.tls.ca_cert ))
loggregator_tls_doppler:
  ca: (( properties.loggregator.tls.ca_cert ))
  certificate: (( properties.loggregator.tls.doppler.cert ))
  private_key: (( properties.loggregator.tls.doppler.key ))
loggregator_tls_metron:
  ca: (( properties.loggregator.tls.ca_cert ))
  certificate: (( properties.loggregator.tls.metron.cert ))
  private_key: (( properties.loggregator.tls.metron.key ))
loggregator_tls_statsdinjector:
  ca: (( properties.loggregator.tls.ca_cert ))
  certificate: (( properties.loggregator.tls.statsd_injector.cert ))
  private_key: (( properties.loggregator.tls.statsd_injector.key ))
loggregator_tls_syslogdrainbinder:
  ca: (( properties.diego.bbs.ca_cert ))
  certificate: (( properties.loggregator.tls.syslogdrainbinder.cert ))
  private_key: (( properties.loggregator.tls.syslogdrainbinder.key ))
loggregator_tls_tc:
  ca: (( properties.loggregator.tls.ca_cert ))
  certificate: (( properties.loggregator.tls.trafficcontroller.cert ))
  private_key: (( properties.loggregator.tls.trafficcontroller.key ))
nats_password: (( properties.nats.password ))
router_route_services_secret: (( properties.router.route_services_secret ))
router_status_password: (( properties.router.status.password ))
uaa_admin_client_secret: (( properties.uaa.admin.client_secret ))
uaa_ca:
  ca: (( properties.uaa.ca_cert ))
  certificate: (( properties.uaa.ca_cert ))
uaa_clients_cc-routing_secret: (( properties.uaa.clients.cc_routing.secret ))
uaa_clients_cc-service-dashboards_secret: (( properties.uaa.clients.cc-service-dashboards.secret ))
uaa_clients_cloud_controller_username_lookup_secret: (( properties.uaa.clients.cloud_controller_username_lookup.secret ))
uaa_clients_doppler_secret: (( properties.uaa.clients.doppler.secret ))
uaa_clients_gorouter_secret: (( properties.uaa.clients.gorouter.secret ))
uaa_clients_routing_api_client_secret: (( properties.uaa.clients.routing_api_client.secret ))
uaa_clients_ssh-proxy_secret: (( properties.uaa.clients.ssh-proxy.secret ))
uaa_clients_tcp_emitter_secret: (( properties.uaa.clients.tcp_emitter.secret ))
uaa_clients_tcp_router_secret: (( properties.uaa.clients.tcp_router.secret ))
uaa_database_password: (( properties.uaadb.roles.[0].password ))
uaa_jwt_signing_key:
  private_key: (( merge ))
uaa_login_saml:
  ca: (( properties.uaa.ca_cert ))
  certificate: (( properties.login.saml.serviceProviderCertificate ))
  private_key: (( properties.login.saml.serviceProviderKey ))
uaa_ssl:
  ca: (( properties.uaa.ca_cert ))
  certificate: (( properties.uaa.sslCertificate ))
  private_key: (( properties.uaa.sslPrivateKey ))
cc_bridge_cc_uploader_server:
  ca: (( properties.capi.cc_uploader.mutual_tls.ca_cert ))
  certificate: (( properties.capi.cc_uploader.mutual_tls.server_cert ))
  private_key: (( properties.capi.cc_uploader.mutual_tls.server_key ))
network_policy_ca:
  ca: (( properties.cf_networking.policy_server_internal.ca_cert ))
  certificate: (( properties.cf_networking.policy_server_internal.ca_cert ))
  private_key: (( from_user.policy_server_ca.private_key ))
network_policy_server:
  ca: (( properties.cf_networking.policy_server_internal.ca_cert ))
  certificate: (( properties.cf_networking.policy_server_internal.server_cert ))
  private_key: (( properties.cf_networking.policy_server_internal.server_key ))
network_policy_client:
  ca: (( properties.cf_networking.vxlan_policy_agent.ca_cert ))
  certificate: (( properties.cf_networking.vxlan_policy_agent.client_cert ))
  private_key: (( properties.cf_networking.vxlan_policy_agent.client_key ))
silk_ca:
  ca: (( properties.cf_networking.silk_controller.ca_cert ))
  certificate: (( properties.cf_networking.silk_controller.ca_cert ))
  private_key: (( from_user.silk_ca.private_key ))
silk_daemon:
  ca: (( properties.cf_networking.silk_daemon.ca_cert ))
  certificate: (( properties.cf_networking.silk_daemon.client_cert ))
  private_key: (( properties.cf_networking.silk_daemon.client_key ))
silk_controller:
  ca: (( properties.cf_networking.silk_controller.ca_cert ))
  certificate: (( properties.cf_networking.silk_controller.server_cert ))
  private_key: (( properties.cf_networking.silk_controller.server_key ))
uaa_clients_network_policy_secret: (( properties.cf_networking.policy_server.uaa_client_secret ))
jobs:
- name: database_z1
  properties: (( merge ))
properties:
  app_ssh:
    host_key_fingerprint: (( merge || nil ))
  etcd:
    ca_cert: (( merge ))
    client_cert: (( merge || nil ))
    client_key: (( merge || nil ))
    peer_ca_cert: (( merge ))
    peer_cert: (( merge || nil ))
    peer_key: (( merge || nil ))
    server_cert: (( merge || nil ))
    server_key: (( merge || nil ))
  system_domain: (( merge || nil ))
  login:
    saml:
      serviceProviderCertificate: (( merge || nil ))
      serviceProviderKey: (( merge || nil ))
  uaa:
    admin:
      client_secret: (( merge || nil ))
    jwt: (( merge || nil ))
    scim:
      users:
      - password: (( merge || nil ))
    ca_cert: (( merge ))
    sslCertificate: (( merge || nil ))
    sslPrivateKey: (( merge || nil ))
    clients:
      cc_routing:
        secret: (( merge || nil ))
      cc-service-dashboards:
        secret: (( merge || nil ))
      cloud_controller_username_lookup:
        secret: (( merge || nil ))
      doppler:
        secret: (( merge || nil ))
      gorouter:
        secret: (( merge || nil ))
      routing_api_client:
        secret: (( merge ))
      ssh-proxy:
        secret: (( merge || nil ))
      tcp_emitter:
        secret: (( merge ))
      tcp_router:
        secret: (( merge ))
  uaadb:
    roles:
    - password: (( merge || nil ))
  consul:
    ca_cert: (( merge ))
    agent_cert: (( merge || nil ))
    agent_key: (( merge || nil ))
    server_cert: (( merge || nil ))
    server_key: (( merge || nil ))
    encrypt_keys:
    - (( merge || nil ))
  blobstore:
    admin_users:
    - username: (( merge || nil ))
      password: (( merge || nil ))
    secure_link:
      secret: (( merge || nil ))
  capi:
    cc_uploader:
      cc:
        ca_cert: (( merge ))
        client_cert: (( merge || nil ))
        client_key: (( merge || nil ))
      mutual_tls:
        ca_cert: (( merge ))
        server_cert: (( merge || nil ))
        server_key: (( merge || nil ))
    tps:
      cc:
        ca_cert: (( merge ))
        client_cert: (( merge || nil ))
        client_key: (( merge || nil ))
  cc:
    bulk_api_password: (( merge || nil ))
    db_encryption_key: (( merge || nil ))
    internal_api_password: (( merge || nil ))
    staging_upload_password: (( merge || nil ))
    mutual_tls:
      ca_cert: (( merge ))
      public_cert: (( merge || nil ))
      private_key: (( merge  || nil))
  ccdb:
    roles:
    - (( merge || nil ))
  diego:
    auctioneer:
      ca_cert: (( merge || nil ))
      server_key: (( merge || nil ))
      server_cert: (( merge || nil ))
      bbs:
        client_cert: (( merge ))
        client_key: (( merge ))
    bbs:
      sql:
        db_password: (( merge || nil ))
      active_key_label: (( merge || nil ))
      encryption_keys:
      - passphrase: (( merge || nil ))
      ca_cert: (( merge ))
      server_cert: (( merge || nil ))
      server_key: (( merge || nil ))
      auctioneer:
        ca_cert: (( merge ))
        client_cert: (( merge || nil ))
        client_key: (( merge || nil ))
      rep:
        ca_cert: (( merge ))
        client_cert: (( merge || nil ))
        client_key: (( merge || nil ))
    locket:
      sql:
        db_password: (( merge ))
    rep:
      ca_cert: (( merge ))
      server_cert: (( merge || nil ))
      server_key: (( merge || nil ))
    ssh_proxy:
      host_key: (( merge || nil ))
      bbs:
        ca_cert: (( merge ))
        client_cert: (( merge || nil ))
        client_key: (( merge || nil ))
  doppler_endpoint:
    shared_secret: (( merge || nil ))
  loggregator:
    tls:
      ca_cert: (( merge ))
      doppler:
        cert: (( merge || nil ))
        key: (( merge || nil ))
      metron:
        cert: (( merge || nil ))
        key: (( merge || nil ))
      statsd_injector:
        cert: (( merge || nil ))
        key: (( merge || nil ))
      syslogdrainbinder:
        cert: (( merge || nil ))
        key: (( merge || nil ))
      trafficcontroller:
        cert: (( merge || nil ))
        key: (( merge || nil ))
  nats:
    password: (( merge || nil ))
  router:
    route_services_secret: (( merge || nil ))
    status:
      password: (( merge || nil ))
  cf_networking:
    policy_server:
      uaa_client_secret: (( merge ))
    policy_server_internal:
      ca_cert: (( merge ))
      server_cert: (( merge ))
      server_key: (( merge ))
    silk_controller:
      ca_cert: (( merge ))
      server_cert: (( merge ))
      server_key: (( merge ))
    silk_daemon:
      ca_cert: (( merge ))
      client_cert: (( merge ))
      client_key: (( merge ))
    vxlan_policy_agent:
      ca_cert: (( merge ))
      client_cert: (( merge ))
      client_key: (( merge ))

from_user:
  policy_server_ca:
    private_key: (( merge ))
  silk_ca:
    private_key: (( merge ))
